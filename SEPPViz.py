# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Proyecto.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.



import folium
import pandas as pd
import numpy as np
from folium import plugins
from PyQt5 import QtCore, QtWidgets, QtWebEngineWidgets, QtGui
from scipy import stats as st

today = 1550000000

def m_mu(m, x, y, alpha, gamma):
    normal = st.multivariate_normal([0,0],[[gamma,0],[0,gamma]])
    T = today#-m[:,2].min()
    return (alpha/T*normal.pdf((y,x) - m[:,:2])).sum()

def m_g(m, x, y, t, sigma, omega, theta):
    normal = st.multivariate_normal([0,0],[[sigma,0],[0,sigma]])
    expon = st.expon(scale = 1/omega)
    return np.inner(theta*expon.pdf(t-m[:,2]).T,normal.pdf((y,x) -  m[:,:2]).T)

def m_lamda(m, x, y, t, alpha, gamma, sigma, omega, theta):
    return m_mu(m, x, y, alpha, gamma) + m_g(m, x, y, t, sigma, omega, theta)

    
def generate_meshgrid(csv_path, alpha, gamma, sigma, omega, theta, heatmap_function, l, e, t):
    m = csv_to_matrix(csv_path)
    
    # Define a custom function to generate data for the heatmap
    def aux_function(x, y):
        return heatmap_function(m, x, y, t, alpha, gamma, sigma, omega, theta)

    aux_function = np.vectorize(aux_function)

    c = l/111320

    # Generate x and y values
    x = np.linspace(m[:,1].min()- e*c,m[:,1].max() + e*c, int((m[:,1].max() + 2*e*c - m[:,1].min())/c+1))
    y = np.linspace(m[:,0].min()- e*c,m[:,0].max() + e*c, int((m[:,0].max() + 2*e*c - m[:,0].min())/c+1))

    # Create a meshgrid from x and y values
    X, Y = np.meshgrid(x, y)

    # Evaluate the custom function for each (x, y) pair
    D = aux_function(X, Y)
    
    return X,Y,D

def generate_heatmap_csv(X, Y, D, csv_path):
    s = pd.DataFrame(columns=["lat", "lon", "intensity"])
    
    s["lat"] = Y.flatten()
    s["lon"] = X.flatten()
    s["intensity"] = D.flatten()
    
    s.to_csv(csv_path, index=False)

    return s

def show_heatmap(X,Y,D):
    # Create a figure and axes
    fig, ax = plt.subplots()

    # Create the heatmap
    heatmap = ax.imshow(D, cmap='hot')

    # Add a colorbar
    cbar = fig.colorbar(heatmap)

    # Add gridlines
    ax.grid(which='minor', color='black', linestyle='-', linewidth=1)
    ax.tick_params(which='minor', bottom=False, left=False)

    # Rotate the x-axis labels
    plt.setp(ax.get_xticklabels(), rotation=45, ha='right', rotation_mode='anchor')

    # Set the title and labels
    ax.set_title('Predicted Heatmap')
    ax.set_xlabel('LAT')
    ax.set_ylabel('LONG')

    # Show the heatmap
    plt.show()
    
def generate_heatmap_viz(predicted_heatmap_csv_path, real_events_csv_path, dest_name):
    # Load Madrid map using Folium
    madrid_map = folium.Map(location=[40.4168, -3.7038], zoom_start=13)

    # Load heatmap data
    heatmap_data = pd.read_csv(predicted_heatmap_csv_path)
    
    # Load real events data
    real_events_data = pd.read_csv(real_events_csv_path)
    
    real_events_data["intensity"] = real_events_data.Timestamp/real_events_data.Timestamp.max()

    # Create a HeatMap layer using the heatmap data
    heat_layer = folium.FeatureGroup(name='Predicted Heatmap')
    heat_layer.add_child(plugins.HeatMap(heatmap_data[['lat', 'lon', 'intensity']].values, min_opacity=0.1, max_opacity=0.2, use_local_extrema=True, radius=50))
    
    # Create a HeatMap layer using the heatmap data
    real_layer = folium.FeatureGroup(name='Real Events')
    real_layer.add_child(plugins.HeatMap(real_events_data[['LAT', 'LONG', 'intensity']].values, min_opacity=0.1, max_opacity=0.8, use_local_extrema=False, radius=20))

    # Add the HeatMap layer to the map
    madrid_map.add_child(heat_layer)
    madrid_map.add_child(real_layer)

    # Add a layer control to the map
    folium.LayerControl().add_to(madrid_map)

    # Save the map to an HTML file
    madrid_map.save(dest_name)

def haz_todo(
    alpha, gamma, sigma, omega, theta, 
    t, l,
    heatmap_function=m_lamda, 
    output_html_path="heatmap_madrid.html",  input_csv_path="data/data_spain.csv", intermediate_csv_path="data/output/aux.csv",
    e=2
):
    X,Y,D = generate_meshgrid(input_csv_path, alpha, gamma, sigma, omega, theta, heatmap_function=heatmap_function, l=l, e=e, t=t)
    generate_heatmap_csv(X,Y,D,intermediate_csv_path)
    generate_heatmap_viz(intermediate_csv_path, input_csv_path, output_html_path)
    #show_heatmap(X,Y,D)
    return

def csv_to_matrix(csv_path):
    ds = pd.read_csv(csv_path)
    return np.array(ds)[:,:3].astype(float)
    

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1000, 800)
        MainWindow.setMinimumSize(350, 500)
        MainWindow.setWindowTitle("Predicci√≥n de delitos")

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        #self.layout = QtWidgets.QVBoxLayout()
        #self.centralwidget.setLayout(self.layout)

        self.gridWidget = QtWidgets.QWidget()
        self.gridWidget.setObjectName("gridWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.gridWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")

        self.label_city = QtWidgets.QLabel(self.gridWidget)
        self.gridLayout.addWidget(self.label_city, 1, 0, 1, 1)
        self.label_city.setObjectName("label_city")

        self.city_select = QtWidgets.QComboBox(self.gridWidget)
        self.gridLayout.addWidget(self.city_select, 2, 0, 1, 1)
        self.city_select.setEditable(False)
        self.city_select.setObjectName("city_select")
        self.city_select.addItem("Madrid")  #index 0
        self.city_select.addItem("Chicago") #index 1
        
        self.label_db = QtWidgets.QLabel(self.gridWidget)
        self.gridLayout.addWidget(self.label_db, 3, 0, 1, 1)
        self.label_db.setObjectName("label_db")

        self.db_select = QtWidgets.QComboBox(self.gridWidget)
        self.gridLayout.addWidget(self.db_select, 4, 0, 1, 1)
        self.db_select.setObjectName("db_select")
        self.db_select.addItem("Madrid")    #index 0
        self.db_select.addItem("Chicago")   #index 1
        #self.db_select.currentTextChanged.connect(self.updateDb)


        self.label_time = QtWidgets.QLabel(self.gridWidget)
        self.label_time.setObjectName("label_time")
        self.gridLayout.addWidget(self.label_time, 5, 0, 1, 1)
        self.time = QtWidgets.QDateTimeEdit(self.gridWidget)
        self.time.setDate(QtCore.QDate(2024, 1, 1))
        self.time.setDisplayFormat("dd-MM-yyyy HH:mm:ss")
        #self.time.timeChanged.connect(self.updateTi)
        self.time.setObjectName("time")
        self.gridLayout.addWidget(self.time, 6, 0, 1, 1)

        self.label_alpha = QtWidgets.QLabel(self.gridWidget)
        self.label_alpha.setObjectName("label_alpha")
        self.gridLayout.addWidget(self.label_alpha, 7, 0, 1, 1)
        self.alpha = QtWidgets.QLineEdit(self.gridWidget)
        #self.alpha.textChanged.connect(self.updateAl)
        self.alpha.setText("0.1")
        self.alpha.setObjectName("alpha")
        self.gridLayout.addWidget(self.alpha, 8, 0, 1, 1)
        
        self.label_gamma = QtWidgets.QLabel(self.gridWidget)
        self.label_gamma.setObjectName("label_gamma")
        self.gridLayout.addWidget(self.label_gamma, 9, 0, 1, 1)
        self.gamma = QtWidgets.QLineEdit(self.gridWidget)
        #self.gamma.textChanged.connect(self.updateGa)
        self.gamma.setText("0.04")
        self.gamma.setObjectName("gamma")
        self.gridLayout.addWidget(self.gamma, 10, 0, 1, 1)

        self.label_sigma = QtWidgets.QLabel(self.gridWidget)
        self.label_sigma.setObjectName("label_sigma")
        self.gridLayout.addWidget(self.label_sigma, 11, 0, 1, 1)
        self.sigma = QtWidgets.QLineEdit(self.gridWidget)
        #self.sigma.textChanged.connect(self.updateSi)
        self.sigma.setText("0.04")
        self.sigma.setObjectName("sigma")
        self.gridLayout.addWidget(self.sigma, 12, 0, 1, 1)

        self.label_omega = QtWidgets.QLabel(self.gridWidget)
        self.label_omega.setObjectName("label_omega")
        self.gridLayout.addWidget(self.label_omega, 13, 0, 1, 1)
        self.omega = QtWidgets.QLineEdit(self.gridWidget)
        #self.omega.textChanged.connect(self.updateOm)
        self.omega.setText("0.001")
        self.omega.setObjectName("omega")
        self.gridLayout.addWidget(self.omega, 14, 0, 1, 1)

        self.label_theta = QtWidgets.QLabel(self.gridWidget)
        self.label_theta.setObjectName("label_theta")
        self.gridLayout.addWidget(self.label_theta, 15, 0, 1, 1)
        self.theta = QtWidgets.QLineEdit(self.gridWidget)
        #self.theta.textChanged.connect(self.updateTh)
        self.theta.setText("1")
        self.theta.setObjectName("theta")
        self.gridLayout.addWidget(self.theta, 16, 0, 1, 1)

        self.label_L = QtWidgets.QLabel(self.gridWidget)
        self.label_L.setObjectName("label_L")
        self.label_L.setText("L")
        self.gridLayout.addWidget(self.label_L, 17, 0, 1, 1)
        self.L = QtWidgets.QLineEdit(self.gridWidget)
        #self.L.textChanged.connect(self.updateTh)
        self.L.setText("150")
        self.L.setObjectName("L")
        self.gridLayout.addWidget(self.L, 18, 0, 1, 1)

        self.label_n = QtWidgets.QLabel(self.gridWidget)
        self.label_n.setObjectName("label_n")
        self.label_n.setText("N")
        self.gridLayout.addWidget(self.label_n, 19, 0, 1, 1)
        self.n = QtWidgets.QLineEdit(self.gridWidget)
        #self.l.textChanged.connect(self.updateTh)
        self.n.setText("200")
        self.n.setObjectName("n")
        self.gridLayout.addWidget(self.n, 20, 0, 1, 1)

        self.calc_button = QtWidgets.QPushButton("CALCULAR")
        self.gridLayout.addWidget(self.calc_button, 21, 0, 1, 1)
        self.calc_button.clicked.connect(self.calculate)

        self.formLayoutWidget = QtWidgets.QWidget()
        self.formLayoutWidget.setObjectName("formLayoutWidget")
        self.formLayoutWidget.setMinimumSize(500, 500)
        self.formLayout = QtWidgets.QGridLayout(self.formLayoutWidget)

        self.heatmap = QtWebEngineWidgets.QWebEngineView(self.formLayoutWidget)
        self.formLayout.addWidget(self.heatmap)
        dir = QtCore.QDir.currentPath()
        self.heatmap.setUrl(QtCore.QUrl.fromLocalFile(dir + "/" + "heatmap_madrid.html"))
        self.heatmap.setObjectName("heatmap")

        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setFrameShape(QtWidgets.QFrame.VLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")

        self.HWidget = QtWidgets.QWidget(self.centralwidget)
        self.Hbox = QtWidgets.QHBoxLayout(self.HWidget)
        self.Hbox.addWidget(self.gridWidget, stretch=1)
        self.Hbox.addWidget(self.line)
        self.Hbox.addWidget(self.formLayoutWidget, stretch=4)

        self.centralwidget.setLayout(self.Hbox)
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)


    def calculate(self):
        self.omegav = float(self.omega.text())
        print(self.omegav)

        self.alphav = float(self.alpha.text())
        print(self.alphav)

        self.sigmav = float(self.sigma.text())
        print(self.sigmav)

        self.thetav = float(self.theta.text())
        print(self.thetav)

        self.gammav = float(self.gamma.text())
        print(self.gammav)

        self.timev = self.time.dateTime().toSecsSinceEpoch()
        print(self.timev)

        self.lv = float(self.L.text())
        self.nv = float(self.n.text())

        index = self.db_select.currentIndex()
        if index == 0:
            self.ds = pd.read_csv("data/data_spain.csv")
            self.m = np.array(self.ds)[:,:3].astype(float)
            print("Espa√±a")
        if index == 1:
            print("Chicago")

        haz_todo(self.alphav, self.gammav, self.sigmav, self.omegav, self.thetav, self.timev, self.lv, input_csv_path="data/data_spain.csv")

        self.heatmap.reload()
            

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle("Predicciones de robos")
        self.label_city.setText(_translate("MainWindow", "Ciudad"))
        self.city_select.setItemText(0, _translate("MainWindow", "Chicago"))
        self.city_select.setItemText(1, _translate("MainWindow", "Madrid"))
        self.label_db.setText(_translate("MainWindow", "Base de datos"))
        self.db_select.setItemText(0, _translate("MainWindow", "db_1"))
        self.db_select.setItemText(1, _translate("MainWindow", "db_2"))
        self.label_theta.setText(_translate("MainWindow", "Theta"))
        self.label_omega.setText(_translate("MainWindow", "Omega"))
        self.label_gamma.setText(_translate("MainWindow", "Gamma"))
        self.label_sigma.setText(_translate("MainWindow", "Sigma"))
        self.label_alpha.setText(_translate("MainWindow", "Alpha"))
        self.label_time.setText(_translate("MainWindow", "Tiempo"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)

    MainWindow.show()
    sys.exit(app.exec_())

